<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="farmersmarket.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="7306"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/><expanded_item id="4" parent="1"/></tab_structure><tab_browse><table title="booth" custom_title="0" dock_id="1" table="4,5:mainbooth"/><dock_state state="000000ff00000000fd00000001000000020000000000000000fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000010100ffffff000000000000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1">-- string manipulate

SELECT DISTINCT

LTRIM('            THOMAS ROSNETHAL         ') as [ltrim]
,RTRIM('            THOMAS ROSNETHAL         ') as [rtrim]
,LTRIM(RTRIM('            THOMAS ROSNETHAL         ')) as [both]


--upper/lower
,lower(customer_first_name)
,upper(customer_last_name)


--concat
,customer_first_name || ' ' ||customer_last_name as customer_name
,UPPER(customer_first_name) || ' ' || UPPER(customer_last_name) as upper_full_name

,SUBSTR(customer_last_name,4) -- any length from the 4th character
,SUBSTR(customer_last_name,4,2) 
,SUBSTR(customer_last_name, -5,4) -- counting from the right
,SUBSTR(customer_last_name,1,2)

,length(customer_last_name)
,'THOMAS

ROSENTHAL' 

,replace('THOMAS

ROSENTHAL',char(10),' ') -- removing all instances of line breaks from this string

WHERE customer_first_name REGEXP '(a)$' -- filtering to only ending in e, has to be valid regex
from customer</sql><sql name="SQL 2">
WHERE customer_first_name REGEXP '(a)$' -- filtering to only ending in e, has to be valid regex

--UNION/UNIONALL

--most and least expensive product by vendor with a UNION

SELECT vendor_id, product_id, original_price, rn_max AS [row_number] 
FROM 
(
	SELECT DISTINCT 
	vendor_id, product_id, original_price
	,ROW_NUMBER() OVER(PARTITION BY vendor_id ORDER BY original_price DESC) as rn_max

	FROM vendor_inventory
) x
where rn_max = 1

UNION -- union returned 5 rows, union all returned 6 rows (vendor #4 was duplicate values)
SELECT * FROM 
(
	SELECT DISTINCT 
	vendor_id, product_id, original_price
	,ROW_NUMBER() OVER(PARTITION BY vendor_id ORDER BY original_price ASC) as rn_min

	FROM vendor_inventory
  
  
--</sql><sql name="SQL 3">
--FULL OUTER JOIN WITH A UNION
--two stores, determining which customes they have in stock

DROP TABLE IF EXISTS temp.store1; 
CREATE TEMP TABLE IF NOT EXISTS temp.store1
(
costume TEXT,
quantity INT
);

INSERT INTO temp.store1
VALUES(&quot;tiger&quot;,6),
        (&quot;elephant&quot;,2),
        (&quot;princess&quot;, 4);


DROP TABLE IF EXISTS temp.store2;
CREATE TEMP TABLE IF NOT EXISTS temp.store2
(
costume TEXT,
quantity INT
);

INSERT INTO temp.store2
VALUES(&quot;tiger&quot;,2),
	(&quot;dancer&quot;,7),
	(&quot;superhero&quot;, 5);
  

SELECT s1.costume, s1.quantity as store1_quantity, s2.quantity as store2_quantity
FROM store1 s1
LEFT JOIN store2 s2 on s1.costume = s2.costume

UNION ALL

SELECT s2.costume, s1.quantity, s2.quantity
FROM store2 s2
LEFT JOIN store1 s1 on s1.costume = s2.costume
WHERE s1.quantity IS NULL
  
</sql><sql name="SQL 4">
--INTERSECT / EXCEPT

--products that have been sold (e.g. are in customer_purchases and product)
--direction does not matter
SELECT product_id
FROM customer_purchases
INTERSECT
SELECT product_id
FROM product;

--products that have NOT been sold (e.g. are NOT in customer_purchases even though in product
--plus names

SELECT x.product_id, product_name
FROM (
	SELECT product_id
	FROM product
	EXCEPT
	SELECT product_id
	FROM customer_purchases
) x
JOIN product p on x.product_id = p.product_id;

--NOTHING
--direction matters!
SELECT product_id
FROM product
EXCEPT
SELECT product_id
FROM customer_purchases

</sql><sql name="SQL 5*">
--INSERT UPDATE DELETE

DROP TABLE IF EXISTS temp.product_expanded;
CREATE TEMP TABLE product_expanded AS 
	SELECT * FROM product;
	
INSERT INTO product_expanded
VALUES(26, 'Almonds', '1 lb', 1, 'lbs');


--update the product_size for almonds to 1/2 lb
UPDATE product_expanded
SET product_size = '1/2 kg',product_qty_type = 'kg'
WHERE product_id = 26;

-- delete our almond
--DELETE from product_expanded
--SELECT * from product_expanded
--WHERE product_id = 26;

SELECT * from product_expanded</sql><current_tab id="4"/></tab_sql></sqlb_project>
